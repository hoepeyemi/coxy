name: Deploy Next.js Frontend

on:
  push:
    branches: [ main ]


env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  HOST: ${{ secrets.SSH_HOST }}
  HOST_USERNAME: ${{ secrets.SSH_USERNAME }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/iris-frontend:latest
          cache-from: type=registry,ref=${{ env.DOCKER_USERNAME }}/iris-frontend:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_USERNAME }}/iris-frontend:buildcache,mode=max

      - name: Deploy to Ubuntu server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ env.HOST_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            echo "üöÄ Next.js Frontend deployment started at $(date '+%Y-%m-%d %H:%M:%S UTC')"
            
            # Ensure directory structure
            mkdir -p ~/iris/frontend
            
            # Validate .env exists ‚Äî FAIL FAST if missing
            ENV_FILE=~/iris/frontend/.env
            if [ ! -f "$ENV_FILE" ]; then
              echo "‚ùå CRITICAL: .env file NOT FOUND at $ENV_FILE"
              echo "üëâ Please create it on the server with required env vars:"
              echo "   NODE_ENV=production"
              echo "   NEXT_PUBLIC_API_URL=..."
              echo "   PORT=3000"
              exit 1
            fi
            
            # Backup existing .env
            BACKUP_FILE="$ENV_FILE.backup.$(date +%Y%m%d_%H%M%S)"
            cp "$ENV_FILE" "$BACKUP_FILE"
            echo "‚úÖ Backed up .env to $BACKUP_FILE"
            
            # Validate critical environment variables
            if ! grep -q "^NEXT_PUBLIC_API_URL=" "$ENV_FILE"; then
              echo "‚ö†Ô∏è WARNING: NEXT_PUBLIC_API_URL is not set in .env ‚Äî frontend may not work correctly!"
            fi
            
            if ! grep -q "^PORT=3000" "$ENV_FILE"; then
              echo "‚ö†Ô∏è WARNING: PORT=3000 not found in .env ‚Äî setting default."
              echo "PORT=3000" >> "$ENV_FILE"
            fi
            
            # Stop and remove existing container
            echo "üõë Stopping existing container..."
            sudo docker stop iris-frontend 2>/dev/null || true
            sudo docker rm iris-frontend 2>/dev/null || true
            
            # Pull latest image
            echo "üì• Pulling latest image..."
            sudo docker pull ${{ env.DOCKER_USERNAME }}/iris-frontend:latest
            
            # Run new container with server-side .env
            echo "üê≥ Starting new container..."
            sudo docker run -d \
              --name iris-frontend \
              --restart unless-stopped \
              -p 3000:3000 \
              -v "$ENV_FILE":/app/.env:ro \
              ${{ env.DOCKER_USERNAME }}/iris-frontend:latest
            
            # Wait for startup
            echo "‚è≥ Waiting 15s for container to initialize..."
            sleep 15
            
            # Verify container is running
            if ! sudo docker ps | grep -q iris-frontend; then
              echo "‚ùå Container failed to start"
              echo "üìú Logs:"
              sudo docker logs iris-frontend --tail 50
              exit 1
            fi
            
            echo "‚úÖ Container is running"
            CONTAINER_ID=$(sudo docker ps -q -f name=iris-frontend)
            echo "üÜî Container ID: $CONTAINER_ID"
            
            # Test HTTP response
            echo "üß™ Testing application health at http://localhost:3000 ..."
            if curl -f -s --max-time 10 http://localhost:3000 > /dev/null; then
              echo "‚úÖ Application responded successfully"
            else
              echo "‚ùå Application health check FAILED"
              echo "üìú Container logs:"
              sudo docker logs iris-frontend --tail 30
              exit 1
            fi
            
            # Reload Nginx if config exists
            echo "üîÑ Checking Nginx configuration..."
            NGINX_CONF="/etc/nginx/sites-enabled/iris"
            if [ -f "$NGINX_CONF" ]; then
              echo "‚úÖ Nginx config found ‚Äî reloading..."
              sudo systemctl reload nginx && echo "‚úÖ Nginx reloaded successfully" || echo "‚ö†Ô∏è Nginx reload failed"
            else
              echo "‚ö†Ô∏è Nginx config NOT found at $NGINX_CONF ‚Äî ensure reverse proxy is configured manually"
            fi
            
            echo "üéâ Deployment completed successfully at $(date '+%Y-%m-%d %H:%M:%S UTC')"

      - name: Verify Deployment
        uses: appleboy/ssh-action@master
        if: success()
        with:
          host: ${{ env.HOST }}
          username: ${{ env.HOST_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            echo "üîç === Final Deployment Verification ==="
            
            # Confirm container running
            if sudo docker ps | grep -q iris-frontend; then
              echo "‚úÖ Container Status: Running"
              sudo docker inspect iris-frontend --format='Started At: {{.State.StartedAt}} | Status: {{.State.Status}}'
              sudo docker port iris-frontend
            else
              echo "‚ùå Container NOT running"
              sudo docker ps -a | grep iris-frontend
              exit 1
            fi
            
            # Verify .env is mounted and show key vars
            echo "üîë Verifying environment file..."
            if sudo docker exec iris-frontend ls /app/.env >/dev/null 2>&1; then
              echo "‚úÖ .env file mounted successfully"
              echo "üìÑ Key environment variables:"
              sudo docker exec iris-frontend grep -E "^(NODE_ENV|PORT|NEXT_PUBLIC_API_URL)" /app/.env || echo "‚ö†Ô∏è No expected env vars found"
            else
              echo "‚ùå .env file NOT mounted in container"
              exit 1
            fi
            
            # Test accessibility via localhost and Nginx
            echo "üåê Testing access routes..."
            
            # Localhost test
            STATUS_LOCAL=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
            if [ "$STATUS_LOCAL" = "200" ]; then
              echo "‚úÖ Local access: HTTP $STATUS_LOCAL"
            else
              echo "‚ùå Local access failed: HTTP $STATUS_LOCAL"
            fi
            
            # Nginx test (if listening on port 80)
            STATUS_NGINX=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:80 2>/dev/null || echo "000")
            if [ "$STATUS_NGINX" = "200" ]; then
              echo "‚úÖ Nginx proxy: HTTP $STATUS_NGINX"
            elif [ "$STATUS_NGINX" != "000" ]; then
              echo "‚ö†Ô∏è Nginx returned HTTP $STATUS_NGINX ‚Äî may need config check"
            else
              echo "‚ÑπÔ∏è Nginx not tested (port 80 unreachable)"
            fi
            
            # Show recent logs
            echo "üìú Recent application logs:"
            sudo docker logs iris-frontend --tail 10
            
            echo "‚úÖ üéâ FINAL VERIFICATION PASSED ‚Äî DEPLOYMENT SUCCESSFUL"
